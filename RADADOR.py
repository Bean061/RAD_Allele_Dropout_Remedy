#### plese cite 
# Zhou et al., in review.
# The goal of this pipeline can help recover a good amount of dropped RAD-seq loci in outgroups due to
# the allele dropout (ADO) using either whole genome or transcriptomes.

#### Any questions, please contact Wenbin Zhou. wzhou10@ncsu.edu

#### python modules ####
import os
import argparse
import pandas as pd
from Bio import SeqIO
import sys
from Loci_2_partition_nex import Loci2partition
from Concatenated2genes_phylip import con2genes
from Comb_RAD_seq_genes import combRADseq
from BLAST import blast_py
from Add_RNA_2_RAD import addRNA2RAD
from Mafft_new_genes import mafft_genes

def main():
    parser = argparse.ArgumentParser(
        description="This script is used to recapture loci in RAD-seq outgroup from RNA-seq or Genome data. It requires .loci file from ipyrad, .phy file from ipyrad, .fasta file from RNA-seq (Trinity) or Genomic data. You also need to define one outgroup name and output partition file name. '-i', '-o', '-iph', '-itr', '-og' are required arguments. The default output file will be generated at current working dirctory.",
        formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument("-i", "--inputlocifile", dest='input_dir', type=str,
                        help='type in the path of loci file')

    parser.add_argument("-o", "--outputpartition", dest='output_name', type=str,
                        help='name the output partition file (.nexus)')

    parser.add_argument("-iph", "--inputphy", dest='input_phylip_dir', type=str,
                        help='type in the path of phylip file')

    parser.add_argument("-itr", "--inputranscriptome", dest='input_trans_dir', type=str,
                        help='type in the path of reference file, generated by Trinity (RNA-seq).')

    parser.add_argument("-og", "--outgroupname", dest='og_name', type=str,
                        help='define your outgroup name.')



    args = parser.parse_args()
    # print(args)
    f = open("RADADOR.log", "w")
    sys.stdout = f

#### s1: the "Loci2partition" function in “Loci2partition_nex” transfers the loci output file (from ipyrad) into partition nexus file.
    if args.input_dir and args.output_name and args.og_name:
        input_filename = os.path.realpath(args.input_dir)
        output_filename = os.path.realpath(args.output_name)

        Loci2partition(input_filename, output_filename)

#### s2: according to the partition file, the concatenated gene phylip output file (from ipyrad) were divided into 
#### different genes alignments by the "con2genes" function in “Concatenated2gene_phylip”.
        if args.input_phylip_dir:
            input_phylip = os.path.realpath(args.input_phylip_dir)
            con2genes(output_filename, input_phylip)


#### s3: combined all gene sequences from all individual into one master fasta file using the “combRADseq” function.
        output_directory = os.path.dirname(output_filename)
        if os.path.isdir(output_directory) == True:
            output_genes_file = output_directory +"/split_genes"
            combRADseq(output_genes_file)

            if args.input_trans_dir:

                input_RNA_seq = os.path.realpath(args.input_trans_dir)

#### s4:use transcriptomic Trinity contigs result as the reference and BLAST the RAD-seq master fasta file from s3 
#### with the reference via the “blast_py” function in "BLAST".
                blast_py(input_RNA_seq)

                blast_output = output_directory + "/BLAST/result.txt"
                
#### s5: according to the blast result, the matching transcriptomic sequences were obtained to each corresponding 
#### locus via the “addRNA2RAD” function in "Add_RNA_2_RAD".
                if os.path.isfile(blast_output) == True:
                    print("step5")
                    addRNA2RAD(args.og_name, input_RNA_seq, blast_output, output_genes_file)

#### s6: realign the genes with new outgroup sequences using “mafft_genes” function.
            added_gene_folder = output_directory + "/added_outgroup_genes"
            mafft_genes(added_gene_folder)


if __name__ == '__main__':
    main()
